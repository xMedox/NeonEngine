const float PI = 3.14159265359;

struct BaseLight{
	vec3 color;
	float intensity;
};

struct Attenuation{
	float constant;
	float linear;
	float exponent;
};

struct DirectionalLight{
	BaseLight base;
	vec3 direction;
};

struct PointLight{
	BaseLight base;
	Attenuation atten;
	vec3 position;
	float range;
};

struct SpotLight{
	PointLight pointLight;
	vec3 direction;
	float cutoff;
};

float DistributionGGX(vec3 N, vec3 H, float roughness){
	float a = roughness*roughness;
	float a2 = a*a;
	float NdotH = max(dot(N, H), 0.0);
	float NdotH2 = NdotH*NdotH;
	
	float nom = a2;
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;
	
	return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness){
	float r = (roughness + 1.0);
	float k = (r*r) / 8.0;
	
	float nom = NdotV;
	float denom = NdotV * (1.0 - k) + k;
	
	return nom / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness){
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float ggx2 = GeometrySchlickGGX(NdotV, roughness);
	float ggx1 = GeometrySchlickGGX(NdotL, roughness);
	
	return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0){
	return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

vec4 CalcLight(BaseLight base, vec3 direction, vec3 diffuse, vec3 normal, vec3 worldPos, float roughnessMap, float metallicMap, vec3 eyePos){
	vec3 color = pow(diffuse.rgb, vec3(2.2));
	
	float rough = roughnessMap;
	float metal = metallicMap;
	
	vec3 V = normalize(eyePos - worldPos);
	
	vec3 F0 = vec3(0.04);
	F0 = mix(F0, color, metal);
	
	
	vec3 L = -direction;
	vec3 H = normalize(V + L);
	vec3 radiance = base.color * base.intensity;
	
	float NDF = DistributionGGX(normal, H, rough);
	float G = GeometrySmith(normal, V, L, rough);
	vec3 F = fresnelSchlick(clamp(dot(H, V), 0.0, 1.0), F0);
	
	vec3 nominator = NDF * G * F;
	float denominator = 4 * max(dot(normal, V), 0.0) * max(dot(normal, L), 0.0) + 0.001;
	vec3 specular = nominator / denominator;
	
	vec3 kS = F;
	
	vec3 kD = vec3(1.0) - kS;
	kD *= 1.0 - metal;
	
	float NdotL = max(dot(normal, L), 0.0);
	
	return vec4((kD * color / PI + specular) * radiance * NdotL, 1);
}

vec4 CalcPointLight(PointLight pointLight, vec3 diffuse, vec3 normal, vec3 worldPos, float roughnessMap, float metallicMap, vec3 eyePos){
	vec3 lightDirection = worldPos - pointLight.position;
	float distanceToPoint = length(lightDirection);
	
	if(distanceToPoint > pointLight.range){
		return vec4(0.0, 0.0, 0.0, 0.0);
	}
	
	lightDirection = normalize(lightDirection);
	
	return CalcLight(pointLight.base, lightDirection, diffuse, normal, worldPos, roughnessMap, metallicMap, eyePos) / (pointLight.atten.constant + pointLight.atten.linear * distanceToPoint + pointLight.atten.exponent * distanceToPoint * distanceToPoint + 0.0001);
}